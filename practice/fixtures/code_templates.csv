problem_title,language,starter_code,solution_code,is_default
"Two Sum","python3","class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        """"""
        Given an array of integers nums and an integer target,
        return indices of the two numbers such that they add up to target.
        """"""
        pass

# DO NOT MODIFY BELOW THIS LINE
if __name__ == ""__main__"":
    import json
    from typing import List
    
    # Read input
    nums = json.loads(input())
    target = int(input())
    
    # Create solution instance
    solution = Solution()
    result = solution.twoSum(nums, target)
    
    # Print result
    print(json.dumps(result))","class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        num_map = {}
        for i, num in enumerate(nums):
            complement = target - num
            if complement in num_map:
                return [num_map[complement], i]
            num_map[num] = i
        return []

# DO NOT MODIFY BELOW THIS LINE  
if __name__ == ""__main__"":
    import json
    from typing import List
    
    # Read input
    nums = json.loads(input())
    target = int(input())
    
    # Create solution instance
    solution = Solution()
    result = solution.twoSum(nums, target)
    
    # Print result
    print(json.dumps(result))",TRUE
"Valid Parentheses","python3","class Solution:
    def isValid(self, s: str) -> bool:
        """"""
        Given a string s containing just characters '(', ')', '{', '}', '[' and ']',
        determine if the input string is valid.
        """"""
        pass

# DO NOT MODIFY BELOW THIS LINE
if __name__ == ""__main__"":
    # Read input
    s = input().strip()
    
    # Create solution instance
    solution = Solution()
    result = solution.isValid(s)
    
    # Print result
    print(str(result).lower())","class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {')': '(', '}': '{', ']': '['}
        
        for char in s:
            if char in mapping:
                top = stack.pop() if stack else '#'
                if mapping[char] != top:
                    return False
            else:
                stack.append(char)
        
        return not stack

# DO NOT MODIFY BELOW THIS LINE
if __name__ == ""__main__"":
    # Read input  
    s = input().strip()
    
    # Create solution instance
    solution = Solution()
    result = solution.isValid(s)
    
    # Print result
    print(str(result).lower())",TRUE
"Longest Substring Without Repeating Characters","python3","class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        """"""
        Given a string s, find the length of the longest substring 
        without repeating characters.
        """"""
        pass

# DO NOT MODIFY BELOW THIS LINE
if __name__ == ""__main__"":
    # Read input
    s = input().strip()
    
    # Create solution instance  
    solution = Solution()
    result = solution.lengthOfLongestSubstring(s)
    
    # Print result
    print(result)","class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        char_set = set()
        left = 0
        max_length = 0
        
        for right in range(len(s)):
            while s[right] in char_set:
                char_set.remove(s[left])
                left += 1
            
            char_set.add(s[right])
            max_length = max(max_length, right - left + 1)
        
        return max_length

# DO NOT MODIFY BELOW THIS LINE
if __name__ == ""__main__"":
    # Read input
    s = input().strip()
    
    # Create solution instance
    solution = Solution()
    result = solution.lengthOfLongestSubstring(s)
    
    # Print result
    print(result)",TRUE