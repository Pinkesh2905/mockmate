# Generated by Django 5.1.7 on 2025-10-15 14:06

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('image_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('description', models.TextField(blank=True)),
                ('color_code', models.CharField(default='#3B82F6', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PracticeProblem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('difficulty', models.CharField(choices=[('EASY', 'Easy'), ('MEDIUM', 'Medium'), ('HARD', 'Hard')], default='EASY', max_length=10)),
                ('companies', models.CharField(blank=True, max_length=500)),
                ('statement', models.TextField()),
                ('constraints', models.TextField(blank=True)),
                ('hints', models.JSONField(blank=True, default=list)),
                ('approach', models.TextField(blank=True)),
                ('time_complexity', models.CharField(blank=True, max_length=100)),
                ('space_complexity', models.CharField(blank=True, max_length=100)),
                ('leetcode_url', models.URLField(blank=True)),
                ('hackerrank_url', models.URLField(blank=True)),
                ('external_url', models.URLField(blank=True)),
                ('acceptance_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('total_submissions', models.IntegerField(default=0)),
                ('accepted_submissions', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PENDING_APPROVAL', 'Pending Approval'), ('PUBLISHED', 'Published'), ('ARCHIVED', 'Archived'), ('PRIVATE', 'Private')], default='PUBLISHED', max_length=20)),
                ('time_limit', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('memory_limit', models.IntegerField(default=256, validators=[django.core.validators.MinValueValidator(32), django.core.validators.MaxValueValidator(512)])),
                ('is_premium', models.BooleanField(default=False)),
                ('is_private', models.BooleanField(default=False)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='problems', to='practice.category')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_problems', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, related_name='problems', to='practice.tag')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Discussion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('is_solution', models.BooleanField(default=False)),
                ('is_pinned', models.BooleanField(default=False)),
                ('upvotes', models.IntegerField(default=0)),
                ('downvotes', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problem_discussions', to=settings.AUTH_USER_MODEL)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discussions', to='practice.practiceproblem')),
            ],
            options={
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PracticeSubmission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('language', models.CharField(choices=[('python3', 'Python'), ('cpp17', 'C++'), ('java', 'Java'), ('javascript', 'JavaScript'), ('csharp', 'C#'), ('go', 'Go'), ('rust', 'Rust'), ('php', 'PHP'), ('ruby', 'Ruby'), ('kotlin', 'Kotlin'), ('swift', 'Swift')], max_length=20)),
                ('code', models.TextField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('RUNNING', 'Running'), ('ACCEPTED', 'Accepted'), ('WRONG_ANSWER', 'Wrong Answer'), ('TIME_LIMIT_EXCEEDED', 'Time Limit Exceeded'), ('MEMORY_LIMIT_EXCEEDED', 'Memory Limit Exceeded'), ('RUNTIME_ERROR', 'Runtime Error'), ('COMPILATION_ERROR', 'Compilation Error'), ('PRESENTATION_ERROR', 'Presentation Error'), ('INTERNAL_ERROR', 'Internal Error')], default='PENDING', max_length=25)),
                ('execution_time', models.FloatField(blank=True, help_text='Execution time in seconds', null=True)),
                ('memory_used', models.IntegerField(blank=True, help_text='Memory used in KB', null=True)),
                ('results', models.JSONField(blank=True, help_text='Stores detailed results for each test case', null=True)),
                ('passed_cases', models.IntegerField(default=0, help_text='Number of test cases passed')),
                ('total_cases', models.IntegerField(default=0, help_text='Total number of test cases evaluated')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='practice.practiceproblem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='practice_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='ProblemVideoSolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('url', models.URLField()),
                ('is_premium', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_solutions', to='practice.practiceproblem')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('input_data', models.TextField()),
                ('expected_output', models.TextField()),
                ('is_sample', models.BooleanField(default=False)),
                ('is_hidden', models.BooleanField(default=True)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('explanation', models.TextField(blank=True)),
                ('difficulty_weight', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('time_limit', models.IntegerField(blank=True, null=True)),
                ('memory_limit', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_cases', to='practice.practiceproblem')),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problems_solved', models.IntegerField(default=0)),
                ('problems_attempted', models.IntegerField(default=0)),
                ('total_submissions', models.IntegerField(default=0)),
                ('accepted_submissions', models.IntegerField(default=0)),
                ('easy_solved', models.IntegerField(default=0)),
                ('medium_solved', models.IntegerField(default=0)),
                ('hard_solved', models.IntegerField(default=0)),
                ('total_points', models.IntegerField(default=0)),
                ('rank', models.IntegerField(default=0)),
                ('preferred_language', models.CharField(choices=[('python3', 'Python'), ('cpp17', 'C++'), ('java', 'Java'), ('javascript', 'JavaScript'), ('csharp', 'C#'), ('go', 'Go'), ('rust', 'Rust'), ('php', 'PHP'), ('ruby', 'Ruby'), ('kotlin', 'Kotlin'), ('swift', 'Swift')], default='python3', max_length=20)),
                ('languages_used', models.JSONField(default=dict)),
                ('current_streak', models.IntegerField(default=0)),
                ('max_streak', models.IntegerField(default=0)),
                ('last_solved_date', models.DateField(blank=True, null=True)),
                ('average_runtime', models.FloatField(default=0.0)),
                ('total_contest_rating', models.IntegerField(default=1500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='practice_stats', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DiscussionVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.IntegerField(choices=[(1, 'Upvote'), (-1, 'Downvote')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('discussion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='practice.discussion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discussion_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('discussion', 'user')},
            },
        ),
        migrations.CreateModel(
            name='CodeTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('language', models.CharField(choices=[('python3', 'Python'), ('cpp17', 'C++'), ('java', 'Java'), ('javascript', 'JavaScript'), ('csharp', 'C#'), ('go', 'Go'), ('rust', 'Rust'), ('php', 'PHP'), ('ruby', 'Ruby'), ('kotlin', 'Kotlin'), ('swift', 'Swift')], default='python3', max_length=20)),
                ('starter_code', models.TextField(help_text='Initial code template for users')),
                ('solution_code', models.TextField(blank=True, help_text='Reference solution (optional)')),
                ('is_default', models.BooleanField(default=False, help_text='Default template for this language')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='code_templates', to='practice.practiceproblem')),
            ],
            options={
                'ordering': ['language'],
                'unique_together': {('problem', 'language')},
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('awarded_at', models.DateTimeField(auto_now_add=True)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='awarded_to', to='practice.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-awarded_at'],
                'unique_together': {('user', 'badge')},
            },
        ),
        migrations.CreateModel(
            name='UserProblemStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_attempted', models.BooleanField(default=False)),
                ('is_solved', models.BooleanField(default=False)),
                ('first_solved_at', models.DateTimeField(blank=True, null=True)),
                ('total_attempts', models.IntegerField(default=0)),
                ('best_runtime', models.FloatField(default=0.0)),
                ('best_memory', models.FloatField(default=0.0)),
                ('best_score', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('best_submission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='practice.practicesubmission')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_stats', to='practice.practiceproblem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problem_stats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'is_solved'], name='practice_us_user_id_48a0a3_idx'), models.Index(fields=['user', 'is_attempted'], name='practice_us_user_id_b33f39_idx')],
                'unique_together': {('user', 'problem')},
            },
        ),
    ]
